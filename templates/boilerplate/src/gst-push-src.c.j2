{# @formatter:off #}
{% include 'boilerplate/src/license-header/_license-header.c.j2' %}

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "{{ element.name | all_lower_case }}.h"

/* pad templates */
{% include 'boilerplate/src/pads/_src.c.j2' %}

GST_DEBUG_CATEGORY_STATIC (gst_{{ element.name | all_lower_case }}_debug);
#define GST_CAT_DEFAULT gst_{{ element.name | all_lower_case }}_debug

{% include 'boilerplate/src/signals/_definition.c.j2' %}

{% include 'boilerplate/src/properties/_definition.c.j2' %}

{% include 'boilerplate/src/properties/_enum_implementations.c.j2' %}

/* parent class */
#define gst_{{ element.name | all_lower_case }}_parent_class parent_class
G_DEFINE_TYPE (Gst{{ element.name | pascal_case }}, gst_{{ element.name | all_lower_case }}, GST_TYPE_PUSH_SRC);

{% include 'boilerplate/src/_base_methods_declaration.c.j2' %}

/* GstPushSrc member methods */
static gboolean gst_{{ element.name | all_lower_case }}_set_caps (GstBaseSrc * base, GstCaps * caps);
static GstFlowReturn gst_{{ element.name | all_lower_case }}_fill (GstPushSrc * base, GstBuffer *buffer);

static void
gst_{{ element.name | all_lower_case }}_class_init (Gst{{ element.name | pascal_case }}Class * klass)
{
  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);

  {% include 'boilerplate/src/_base_methods_assignment.c.j2' %}

  {% include 'boilerplate/src/properties/_install_properties.c.j2' %}

  {% include 'boilerplate/src/signals/_install_signals.c.j2' %}

  GstBaseSrcClass *base_src_class = GST_BASE_SRC_CLASS (klass);
  base_src_class->set_caps = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_set_caps);

  GstPushSrcClass *src_class = GST_PUSH_SRC_CLASS (klass);
  src_class->fill = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_fill);

  GST_DEBUG_CATEGORY_INIT (gst_{{ element.name | all_lower_case }}_debug, "{{ element.name | all_lower_case }}", 0, "{{ element.name | escape_quotes }}");

  gst_element_class_add_static_pad_template (element_class, &srctemplate);
  gst_element_class_add_static_pad_template (element_class, &srctemplate);

  gst_element_class_set_static_metadata (element_class, "{{ element.name | escape_quotes }}",
      "{{ element.classifications | join('/') | escape_quotes }}",
      "{{ element.description | escape_quotes }}",
      "{{ plugin.author | escape_quotes }} <{{ plugin.authorEmail | escape_quotes }}>");
}

{% include 'boilerplate/src/_base_methods_implementation.c.j2' %}

static gboolean
gst_{{ element.name | all_lower_case }}_set_caps (GstBaseSrc * base, GstCaps * caps)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (base);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "set_caps caps=%" GST_PTR_FORMAT, caps);

  {% include 'boilerplate/src/src_impl/_set_caps.c.j2' %}

  return TRUE;
}

static GstFlowReturn
gst_{{ element.name | all_lower_case }}_fill (GstPushSrc * base, GstBuffer *buffer)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (base);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "fill");

  {% include 'boilerplate/src/src_impl/_fill.c.j2' %}

  return GST_FLOW_OK;
}
