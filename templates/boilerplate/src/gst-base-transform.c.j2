{# @formatter:off #}
{% include 'boilerplate/src/license-header/_license-header.c.j2' %}

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "{{ element.name | all_lower_case }}.h"

/* pad templates */
{% include 'boilerplate/src/pads/_sink.c.j2' %}
{% include 'boilerplate/src/pads/_src.c.j2' %}
// If your source- and sink-caps are not identical, you *must* implement transform_caps or the element
// will not link successfully

GST_DEBUG_CATEGORY_STATIC (gst_{{ element.name | all_lower_case }}_debug);
#define GST_CAT_DEFAULT gst_{{ element.name | all_lower_case }}_debug

{% include 'boilerplate/src/signals/_definition.c.j2' %}

{% include 'boilerplate/src/properties/_definition.c.j2' %}

{% include 'boilerplate/src/properties/_enum_implementations.c.j2' %}

/* parent class */
#define gst_{{ element.name | all_lower_case }}_parent_class parent_class
G_DEFINE_TYPE (Gst{{ element.name | pascal_case }}, gst_{{ element.name | all_lower_case }}, GST_TYPE_BASE_TRANSFORM);

{% include 'boilerplate/src/_base_methods_declaration.c.j2' %}

/* GstBaseTransform member methods */
static gboolean gst_{{ element.name | all_lower_case }}_set_caps (GstBaseTransform * trans, GstCaps * in, GstCaps * out);
static gboolean gst_{{ element.name | all_lower_case }}_start (GstBaseTransform * trans);
static GstFlowReturn gst_{{ element.name | all_lower_case }}_transform_ip (GstBaseTransform * trans, GstBuffer * in);
static gboolean gst_{{ element.name | all_lower_case }}_sink_event (GstBaseTransform * trans, GstEvent * event);

static void
gst_{{ element.name | all_lower_case }}_class_init (Gst{{ element.name | pascal_case }}Class * klass)
{
  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);

  {% include 'boilerplate/src/_base_methods_assignment.c.j2' %}

  {% include 'boilerplate/src/properties/_install_properties.c.j2' %}

  {% include 'boilerplate/src/signals/_install_signals.c.j2' %}

  GstBaseTransformClass *trans_class = GST_BASE_TRANSFORM_CLASS (klass);
  trans_class->set_caps = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_set_caps);
  trans_class->start = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_start);
  trans_class->transform_ip = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_transform_ip);
  trans_class->sink_event = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_sink_event);
  //trans_class->passthrough_on_same_caps = TRUE;

  GST_DEBUG_CATEGORY_INIT (gst_{{ element.name | all_lower_case }}_debug, "{{ element.name | all_lower_case }}", 0, "{{ element.name | escape_quotes }}");

  gst_element_class_add_static_pad_template (element_class, &sinktemplate);
  gst_element_class_add_static_pad_template (element_class, &srctemplate);

  gst_element_class_set_static_metadata (element_class, "{{ element.name | escape_quotes }}",
      "{{ element.classifications | join('/') | escape_quotes }}",
      "{{ element.description | escape_quotes }}",
      "{{ plugin.author | escape_quotes }} <{{ plugin.authorEmail | escape_quotes }}>");
}

{% include 'boilerplate/src/_base_methods_implementation.c.j2' %}

static gboolean
gst_{{ element.name | all_lower_case }}_set_caps (GstBaseTransform * object, GstCaps * in, GstCaps * out)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (object);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "set_caps in=%" GST_PTR_FORMAT " out=%" GST_PTR_FORMAT, in, out);

  return TRUE;
}

static gboolean
gst_{{ element.name | all_lower_case }}_start (GstBaseTransform * object)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (object);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "start");

  return TRUE;
}

static GstFlowReturn
gst_{{ element.name | all_lower_case }}_transform_ip (GstBaseTransform * object, GstBuffer * in)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (object);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "transform_ip");

  return GST_FLOW_OK;
}

static gboolean
gst_{{ element.name | all_lower_case }}_sink_event (GstBaseTransform * object, GstEvent * event)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (object);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "sink_event");

  return GST_BASE_TRANSFORM_CLASS (parent_class)->sink_event (object, event);
}
