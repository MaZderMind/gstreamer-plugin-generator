{# @formatter:off #}
{% include 'boilerplate/src/license-header/_license-header.c.j2' %}

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "{{ element.name | all_lower_case }}.h"

/* pad templates */
{% include 'boilerplate/src/pads/_src.c.j2' %}

GST_DEBUG_CATEGORY_STATIC (gst_{{ element.name | all_lower_case }}_debug);
#define GST_CAT_DEFAULT gst_{{ element.name | all_lower_case }}_debug

{% include 'boilerplate/src/signals/_definition.c.j2' %}

{% include 'boilerplate/src/properties/_definition.c.j2' %}

{% include 'boilerplate/src/properties/_enum_implementations.c.j2' %}

/* parent class */
#define gst_{{ element.name | all_lower_case }}_parent_class parent_class
G_DEFINE_TYPE (Gst{{ element.name | pascal_case }}, gst_{{ element.name | all_lower_case }}, GST_TYPE_BASE_SRC);

{% include 'boilerplate/src/_base_methods_declaration.c.j2' %}

/* GstBaseSrc member methods */
static gboolean gst_{{ element.name | all_lower_case }}_set_caps (GstBaseSrc * base, GstCaps * caps);
static GstFlowReturn gst_{{ element.name | all_lower_case }}_fill (GstBaseSrc * base, guint64 offset, guint size, GstBuffer *buffer);
static gboolean gst_{{ element.name | all_lower_case }}_is_seekable (GstBaseSrc * base);
static gboolean gst_{{ element.name | all_lower_case }}_query (GstBaseSrc * base, GstQuery * query);
static gboolean gst_{{ element.name | all_lower_case }}_do_seek (GstBaseSrc * base, GstSegment * segment);
// if seeking is never possible, better implement GstPushSrc

static void
gst_{{ element.name | all_lower_case }}_class_init (Gst{{ element.name | pascal_case }}Class * klass)
{
  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);

  {% include 'boilerplate/src/_base_methods_assignment.c.j2' %}

  {% include 'boilerplate/src/properties/_install_properties.c.j2' %}

  {% include 'boilerplate/src/signals/_install_signals.c.j2' %}

  GstBaseSrcClass *src_class = GST_BASE_SRC_CLASS (klass);
  src_class->set_caps = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_set_caps);
  src_class->fill = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_fill);
  src_class->is_seekable = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_is_seekable);
  src_class->query = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_query);
  src_class->do_seek = GST_DEBUG_FUNCPTR (gst_{{ element.name | all_lower_case }}_do_seek);

  GST_DEBUG_CATEGORY_INIT (gst_{{ element.name | all_lower_case }}_debug, "{{ element.name | all_lower_case }}", 0, "{{ element.name | escape_quotes }}");

  gst_element_class_add_static_pad_template (element_class, &srctemplate);

  gst_element_class_set_static_metadata (element_class, "{{ element.name | escape_quotes }}",
      "{{ element.classifications | join('/') | escape_quotes }}",
      "{{ element.description | escape_quotes }}",
      "{{ plugin.author | escape_quotes }} <{{ plugin.authorEmail | escape_quotes }}>");
}

{% include 'boilerplate/src/_base_methods_implementation.c.j2' %}

static gboolean
gst_{{ element.name | all_lower_case }}_set_caps (GstBaseSrc * base, GstCaps * caps)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (base);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "set_caps caps=%" GST_PTR_FORMAT, caps);

  gst_video_info_from_caps (&awsomefilter->video_info, caps);

  return TRUE;
}

static gboolean
gst_{{ element.name | all_lower_case }}_is_seekable (GstBaseSrc * base)
{
  return TRUE;
}

static gboolean
gst_{{ element.name | all_lower_case }}_query (GstBaseSrc * base, GstQuery * query)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (base);

  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "do_query QUERY_TYPE_NAME=%s", GST_QUERY_TYPE_NAME(query));

  return GST_BASE_SRC_CLASS (parent_class)->query (base, query);
}

static gboolean
gst_{{ element.name | all_lower_case }}_do_seek (GstBaseSrc * base, GstSegment * segment)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (base);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "do_seek");

  return TRUE;
}

static GstFlowReturn
gst_{{ element.name | all_lower_case }}_fill (GstBaseSrc * base, guint64 offset, guint size, GstBuffer *buffer)
{
  Gst{{ element.name | pascal_case }} *{{ element.name | all_lower_case }} = GST_{{ element.name | upper_snake_case }} (base);
  GST_DEBUG_OBJECT ({{ element.name | all_lower_case }}, "create");

  GstVideoFrame frame;
  gst_video_frame_map (&frame, &awsomefilter->video_info, buffer, GST_MAP_WRITE);

  // fill &frame with video-data here (eg.for RGBx, need to check caps
  guint8 *pixels = GST_VIDEO_FRAME_PLANE_DATA (&frame, 0);
  guint stride = GST_VIDEO_FRAME_PLANE_STRIDE (&frame, 0);
  guint pixel_stride = GST_VIDEO_FRAME_COMP_PSTRIDE (&frame, 0);

  for (guint h = 0; h < awsomefilter->video_info.height; ++h) {
    for (guint w = 0; w < awsomefilter->video_info.width; ++w) {
      guint8 *pixel = pixels + h * stride + w * pixel_stride;

      *(pixel+0) = 255;
      *(pixel+1) = 0;
      *(pixel+2) = 0;
    }
  }

  gst_video_frame_unmap (&frame);

  return GST_FLOW_OK;
}
