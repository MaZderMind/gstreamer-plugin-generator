{# @formatter:off #}
{% include 'boilerplate/src/license-header/_license-header.c.j2' %}
#ifndef _GST_{{ element.name | upper_snake_case }}_H_
#define _GST_{{ element.name | upper_snake_case }}_H_

#include <gst/base/gstpushsrc.h>
{% include 'boilerplate/src/src_impl/_include.h.j2' %}

G_BEGIN_DECLS
#define GST_TYPE_{{ element.name | upper_snake_case }}           (gst_{{ element.name | all_lower_case }}_get_type())
#define GST_{{ element.name | upper_snake_case }}(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_{{ element.name | upper_snake_case }}, Gst{{ element.name | pascal_case }}))
#define GST_{{ element.name | upper_snake_case }}_CLASS(klass)   (G_TYPE_CHECK_CLASS_CAST((klass),  GST_TYPE_{{ element.name | upper_snake_case }}, Gst{{ element.name | pascal_case }}Class))
#define GST_IS_{{ element.name | upper_snake_case }}(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_{{ element.name | upper_snake_case }}))
#define GST_IS_{{ element.name | upper_snake_case }}_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE((klass),  GST_TYPE_{{ element.name | upper_snake_case }}))
typedef struct _Gst{{ element.name | pascal_case }} Gst{{ element.name | pascal_case }};
typedef struct _Gst{{ element.name | pascal_case }}Class Gst{{ element.name | pascal_case }}Class;

{% include 'boilerplate/src/properties/_enum_declarations.h.j2' %}

struct _Gst{{ element.name | pascal_case }}
{
  GstPushSrc base_{{ element.name | all_lower_case }};
  {% include 'boilerplate/src/src_impl/_declaration.h.j2' %}

  {% include 'boilerplate/src/properties/_declaration.h.j2' %}
};

struct _Gst{{ element.name | pascal_case }}Class
{
  GstPushSrcClass base_{{ element.name | all_lower_case }}_class;

  {% include 'boilerplate/src/signals/_declaration.h.j2' %}
};

GType gst_{{ element.name | all_lower_case }}_get_type (void);

G_END_DECLS
#endif // _GST_{{ element.name | upper_snake_case }}_H_
